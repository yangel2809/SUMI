# Generated by Django 4.2.13 on 2024-06-05 18:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_quill.fields
import re
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('home', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Annex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(null=True, upload_to='annex')),
                ('identification', models.TextField(null=True)),
            ],
            options={
                'verbose_name': 'Anexo',
                'verbose_name_plural': 'Anexos',
            },
        ),
        migrations.CreateModel(
            name='Bobbin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('turn', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=3, null=True)),
                ('date', models.DateField(null=True)),
            ],
            options={
                'verbose_name': 'ID único para bobina PR',
                'verbose_name_plural': 'ID único para bobinas PR',
            },
        ),
        migrations.CreateModel(
            name='Cutter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Máquina Cortadora',
                'verbose_name_plural': 'Máquinas Cortadoras',
            },
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=9, null=True, validators=[django.core.validators.MinLengthValidator(9)])),
                ('revission', models.IntegerField(null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('rev_date', models.DateField(null=True)),
            ],
            options={
                'verbose_name': 'Formato',
                'verbose_name_plural': 'Formatos',
            },
        ),
        migrations.CreateModel(
            name='Laminator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Máquina Laminadora',
                'verbose_name_plural': 'Máquinas Laminadoras',
            },
        ),
        migrations.CreateModel(
            name='LaminatorBoot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin', models.CharField(blank=True, default=None, max_length=15, null=True)),
                ('date_time', models.DateTimeField(null=True)),
                ('turn', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=3, null=True)),
                ('machine_speed', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_crown_treatment', models.BooleanField(default=False)),
                ('step', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4')], max_length=1, null=True)),
                ('st_1', models.CharField(max_length=25, null=True)),
                ('st_2', models.CharField(max_length=25, null=True)),
                ('st_3', models.CharField(blank=True, max_length=25, null=True)),
                ('st_4', models.CharField(blank=True, max_length=25, null=True)),
                ('batch', models.CharField(blank=True, max_length=20, null=True)),
                ('formula', models.CharField(blank=True, max_length=7, null=True)),
                ('time', models.CharField(blank=True, max_length=100, null=True)),
                ('temp', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('adhesive', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='home.material')),
                ('laminator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='essays.laminator')),
            ],
            options={
                'verbose_name': 'Arranque de Laminadora',
                'verbose_name_plural': 'Arranques de Laminadora',
            },
        ),
        migrations.CreateModel(
            name='Printer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Máquina Impresora',
                'verbose_name_plural': 'Máquinas Impresoras',
            },
        ),
        migrations.CreateModel(
            name='PrinterBoot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin', models.CharField(blank=True, default=None, max_length=15, null=True)),
                ('date_time', models.DateTimeField(null=True)),
                ('turn', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=3, null=True)),
                ('machine_speed', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_crown_treatment', models.BooleanField(default=False)),
                ('crown_treatment_side', models.CharField(blank=True, choices=[('e', 'Externa'), ('i', 'Interna')], max_length=1, null=True)),
                ('surface_tension', models.CharField(blank=True, choices=[('36', '36'), ('38', '38'), ('40', '40'), ('42', '42'), ('44', '44'), ('46', '46')], max_length=2, null=True)),
                ('sta_01', models.CharField(default='-', max_length=20)),
                ('sta_02', models.CharField(default='-', max_length=20)),
                ('sta_03', models.CharField(default='-', max_length=20)),
                ('sta_04', models.CharField(default='-', max_length=20)),
                ('sta_05', models.CharField(default='-', max_length=20)),
                ('sta_06', models.CharField(default='-', max_length=20)),
                ('sta_07', models.CharField(default='-', max_length=20)),
                ('sta_08', models.CharField(default='-', max_length=20)),
                ('sta_09', models.CharField(default='-', max_length=20)),
                ('sta_10', models.CharField(default='-', max_length=20)),
                ('standar', models.CharField(choices=[('Si', 'Si'), ('No', 'No'), ('NA', 'No Aplica')], default='NA', max_length=2)),
                ('art', models.CharField(choices=[('Si', 'Si'), ('No', 'No'), ('NA', 'No Aplica')], default='NA', max_length=2)),
                ('pre_print', models.CharField(choices=[('Si', 'Si'), ('No', 'No'), ('NA', 'No Aplica')], default='NA', max_length=2)),
                ('develop_folder', models.CharField(choices=[('Si', 'Si'), ('No', 'No'), ('NA', 'No Aplica')], default='NA', max_length=2)),
                ('register', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('text', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('dimensions', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('cutting_guide', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('photocell', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('barcode', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('develop', models.CharField(blank=True, max_length=30, null=True)),
                ('develop_unit', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('develop_result', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('cut_width_result', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('design', models.CharField(blank=True, max_length=30, null=True)),
                ('machine_winding', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8')], max_length=1, null=True)),
                ('winding_description', models.CharField(blank=True, max_length=100, null=True)),
                ('r_left', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_right', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_center', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_average', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('color_standar', models.CharField(choices=[('No Aplica', 'No aplica'), ('Claro', 'Claro'), ('Estándar', 'Estándar'), ('Oscuro', 'Oscuro')], max_length=10, null=True)),
                ('anchorage', models.CharField(choices=[('ac', 'Aceptado'), ('de', 'Deficiente')], max_length=2, null=True)),
                ('rub', models.CharField(choices=[('ac', 'Aceptado'), ('de', 'Deficiente')], max_length=2, null=True)),
                ('ther_resistance', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente')], max_length=2, null=True)),
                ('anchorage_resistance', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente')], max_length=2, null=True)),
                ('cut_diagram', models.BooleanField(default=False)),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('printer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='essays.printer')),
            ],
            options={
                'verbose_name': 'Arranque de impresora Pruebas',
                'verbose_name_plural': 'Arranques de impresoras',
            },
        ),
        migrations.CreateModel(
            name='ProductionOperator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True, unique=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Operador de producción',
                'verbose_name_plural': 'Operadores de producción',
            },
        ),
        migrations.CreateModel(
            name='QualityAnalyst',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True, unique=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Analista ASCA',
                'verbose_name_plural': 'Analistas ASCA',
                'permissions': [('view_personal', 'Can view personal'), ('add_personal', 'Can add personal'), ('change_personal', 'Can edit personal'), ('delete_personal', 'Can delete personal')],
            },
        ),
        migrations.CreateModel(
            name='Rewinder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Máquina Rebobinadora',
                'verbose_name_plural': 'Máquinas Rebobinadoras',
            },
        ),
        migrations.CreateModel(
            name='TestFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('prt', 'prt'), ('lam', 'lam')], max_length=3, null=True)),
                ('turn', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=3, null=True)),
                ('date', models.DateField(null=True)),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('supervisor', models.CharField(blank=True, max_length=30, null=True)),
                ('boss', models.CharField(blank=True, max_length=30, null=True)),
                ('idat', models.CharField(blank=True, max_length=30, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True)),
                ('boot_l', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.laminatorboot')),
                ('boot_p', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.printerboot')),
                ('production_operator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.productionoperator')),
                ('quality_analist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.qualityanalyst')),
            ],
            options={
                'verbose_name': 'Reporte de Control de Calidad',
                'verbose_name_plural': 'Reportes de Control de Calidad',
                'permissions': [('boss_sign_testfile', 'Puede firmar un reporte cómo revisado por jefe'), ('supv_sign_testfile', 'Puede firmar un reporte cómo revisado por supervisor'), ('idat_sign_testfile', 'Puede firmar un reporte cómo revisado por IDAT'), ('export_boot', 'Puede exportar un arranque')],
            },
        ),
        migrations.CreateModel(
            name='TestFileEssay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('essay', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='home.essay')),
                ('test_file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.testfile')),
            ],
            options={
                'verbose_name': 'Ensayos de Reporte de Control de Calidad',
                'verbose_name_plural': 'Ensayos de Reportes de Control de Calidad',
            },
        ),
        migrations.CreateModel(
            name='TestRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('touched', models.BooleanField(default=False)),
                ('number', models.CharField(blank=True, max_length=9, null=True, validators=[django.core.validators.RegexValidator('^[0-9]{2}[-][0-9]{6}$')])),
                ('date', models.DateField(blank=True, null=True)),
                ('production_order', models.CharField(blank=True, max_length=7, null=True)),
                ('company', models.CharField(blank=True, choices=[('mcl', 'Morrocel'), ('crx', 'Curex')], max_length=3, null=True)),
                ('origin', models.CharField(choices=[('new', 'Nueva Estructura'), ('upd', 'Cambio de Estructura'), ('int', 'Prueba Interna')], max_length=3, null=True)),
                ('check_test_client', models.BooleanField(default=False)),
                ('test_client', models.CharField(blank=True, max_length=100, null=True)),
                ('art_number', models.CharField(blank=True, max_length=8, null=True)),
                ('art_date', models.DateField(blank=True, null=True)),
                ('product', models.CharField(max_length=100, null=True)),
                ('design', models.CharField(blank=True, max_length=100, null=True)),
                ('print_selector', models.BooleanField(default=False)),
                ('lamination_process', django_quill.fields.QuillField(null=True)),
                ('surface_selector', models.BooleanField(default=False)),
                ('surface_over', models.CharField(blank=True, max_length=100, null=True)),
                ('reverse_selector', models.BooleanField(default=True)),
                ('reverse_over', models.CharField(blank=True, max_length=100, null=True)),
                ('sindex', models.IntegerField(default=-2)),
                ('sustrate_width', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('print_width', models.CharField(blank=True, max_length=30, null=True)),
                ('print_width_unit', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('colors', models.CharField(blank=True, max_length=200, null=True)),
                ('dist_boder_cell_material', models.CharField(blank=True, max_length=30, null=True)),
                ('repetition', models.CharField(blank=True, max_length=30, null=True)),
                ('repetition_unit', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('width_photo', models.IntegerField(null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('lenght_photo', models.IntegerField(null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('unit_photo', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('check_bobbin', models.BooleanField(default=False)),
                ('width_bobbin', models.CharField(blank=True, max_length=30, null=True)),
                ('width_bobbin_unit', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('develop', models.CharField(blank=True, max_length=30, null=True)),
                ('develop_unit', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('core_dia_bobbin', models.CharField(blank=True, choices=[('3', '3"'), ('6', '6"')], max_length=1, null=True)),
                ('exterior_dia_bobbin', models.CharField(blank=True, max_length=30, null=True)),
                ('exterior_dia_bobbin_unit', models.CharField(blank=True, choices=[('kg', 'kg'), ('mm', 'mm'), ('cm', 'cm'), ('m', 'm')], max_length=3, null=True)),
                ('winding', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8')], max_length=1, null=True)),
                ('winding_description', models.CharField(blank=True, max_length=100, null=True)),
                ('check_ream', models.BooleanField(default=False)),
                ('width_ream', models.CharField(blank=True, max_length=30, null=True)),
                ('lenght_ream', models.CharField(blank=True, max_length=30, null=True)),
                ('weight_ream', models.CharField(blank=True, max_length=30, null=True)),
                ('quantity', models.IntegerField(null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('unit', models.CharField(choices=[('kg', 'kg'), ('m', 'm'), ('m²', 'm²')], max_length=3, null=True)),
                ('tolerance', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('packaging', models.CharField(blank=True, max_length=100, null=True)),
                ('tie_color', models.CharField(blank=True, max_length=100, null=True)),
                ('elaborator', models.CharField(max_length=100, null=True)),
                ('applicant', models.CharField(blank=True, max_length=100, null=True)),
                ('reviewer', models.CharField(blank=True, max_length=100, null=True)),
                ('pre_print', models.BooleanField(default=False)),
                ('colorimetry', models.BooleanField(default=False)),
                ('plan_crx', models.BooleanField(default=False)),
                ('plan_mcl', models.BooleanField(default=False)),
                ('logistics', models.BooleanField(default=False)),
                ('quality', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(blank=True, default=False, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=30, null=True)),
                ('deleted_time', models.DateTimeField(blank=True, null=True)),
                ('deleted_reason', models.TextField(blank=True, default='', null=True)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='home.client', verbose_name='Clientes')),
                ('printer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='essays.printer')),
            ],
            options={
                'verbose_name': 'Solicitud de Prueba',
                'verbose_name_plural': 'Solicitudes de Prueba',
                'permissions': [('sign_testrequest', 'Puede firmar una solicitud de prueba cómo revisada'), ('view_deleted_testrequest', 'Puede ver la papelera de solicitudes de prueba'), ('delete_true_testrequest', 'Puede eliminar permanentemenete una solicitud de prueba'), ('restore_testrequest', 'Puede restaurar una solicitud de prueba de la papelera'), ('return_testrequest', 'Puede regresar una solicitud de prueba a IDAT')],
            },
        ),
        migrations.CreateModel(
            name='TestStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=11, null=True)),
                ('weight', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('thickness', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('from_production', models.CharField(blank=True, max_length=100, null=True)),
                ('material_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='home.materialtype')),
                ('provider', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='home.provider')),
                ('test_request', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.testrequest')),
            ],
            options={
                'verbose_name': 'Estructura',
                'verbose_name_plural': 'Estructuras',
            },
        ),
        migrations.CreateModel(
            name='TestFileEssayResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_t', models.CharField(blank=True, max_length=100, null=True)),
                ('result_a', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_a', models.BooleanField(blank=True, default=False)),
                ('result_b', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_b', models.BooleanField(blank=True, default=False)),
                ('result_c', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_c', models.BooleanField(blank=True, default=False)),
                ('result_p', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_p', models.BooleanField(blank=True, default=False)),
                ('bobbin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.bobbin')),
                ('essay', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.testfileessay')),
            ],
            options={
                'verbose_name': 'Resultados de ensayos de Reporte de Control de Calidad PR',
                'verbose_name_plural': 'Resultados de ensayos de Reportes de Control de Calidad PR',
            },
        ),
        migrations.CreateModel(
            name='TechnicalSpecs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('boss', models.CharField(blank=True, max_length=30, null=True)),
                ('quality_analist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.qualityanalyst')),
                ('test_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.testrequest')),
            ],
        ),
        migrations.AddField(
            model_name='printerboot',
            name='production_operator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.productionoperator'),
        ),
        migrations.AddField(
            model_name='printerboot',
            name='quality_analist',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.qualityanalyst'),
        ),
        migrations.AddField(
            model_name='printerboot',
            name='test_request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.testrequest'),
        ),
        migrations.AddField(
            model_name='laminatorboot',
            name='production_operator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.productionoperator'),
        ),
        migrations.AddField(
            model_name='laminatorboot',
            name='quality_analist',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.qualityanalyst'),
        ),
        migrations.AddField(
            model_name='laminatorboot',
            name='test_request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.testrequest'),
        ),
        migrations.CreateModel(
            name='LaminationEssay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_t', models.CharField(blank=True, max_length=100, null=True)),
                ('result_a', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_a', models.BooleanField(blank=True, default=False)),
                ('result_b', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_b', models.BooleanField(blank=True, default=False)),
                ('result_c', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_c', models.BooleanField(blank=True, default=False)),
                ('result_p', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_p', models.BooleanField(blank=True, default=False)),
                ('essay', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='home.essay')),
                ('laminator_boot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.laminatorboot')),
            ],
            options={
                'verbose_name': 'Análisis de laminacion',
                'verbose_name_plural': 'Análisis de laminacion',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTestStructure',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=11, null=True)),
                ('weight', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('thickness', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('from_production', models.CharField(blank=True, max_length=100, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('material_type', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='home.materialtype')),
                ('provider', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='home.provider')),
                ('test_request', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.testrequest')),
            ],
            options={
                'verbose_name': 'historical Estructura',
                'verbose_name_plural': 'historical Estructuras',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTestRequest',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('touched', models.BooleanField(default=False)),
                ('number', models.CharField(blank=True, max_length=9, null=True, validators=[django.core.validators.RegexValidator('^[0-9]{2}[-][0-9]{6}$')])),
                ('date', models.DateField(blank=True, null=True)),
                ('production_order', models.CharField(blank=True, max_length=7, null=True)),
                ('company', models.CharField(blank=True, choices=[('mcl', 'Morrocel'), ('crx', 'Curex')], max_length=3, null=True)),
                ('origin', models.CharField(choices=[('new', 'Nueva Estructura'), ('upd', 'Cambio de Estructura'), ('int', 'Prueba Interna')], max_length=3, null=True)),
                ('check_test_client', models.BooleanField(default=False)),
                ('test_client', models.CharField(blank=True, max_length=100, null=True)),
                ('art_number', models.CharField(blank=True, max_length=8, null=True)),
                ('art_date', models.DateField(blank=True, null=True)),
                ('product', models.CharField(max_length=100, null=True)),
                ('design', models.CharField(blank=True, max_length=100, null=True)),
                ('print_selector', models.BooleanField(default=False)),
                ('lamination_process', django_quill.fields.QuillField(null=True)),
                ('surface_selector', models.BooleanField(default=False)),
                ('surface_over', models.CharField(blank=True, max_length=100, null=True)),
                ('reverse_selector', models.BooleanField(default=True)),
                ('reverse_over', models.CharField(blank=True, max_length=100, null=True)),
                ('sindex', models.IntegerField(default=-2)),
                ('sustrate_width', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('print_width', models.CharField(blank=True, max_length=30, null=True)),
                ('print_width_unit', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('colors', models.CharField(blank=True, max_length=200, null=True)),
                ('dist_boder_cell_material', models.CharField(blank=True, max_length=30, null=True)),
                ('repetition', models.CharField(blank=True, max_length=30, null=True)),
                ('repetition_unit', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('width_photo', models.IntegerField(null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('lenght_photo', models.IntegerField(null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('unit_photo', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('check_bobbin', models.BooleanField(default=False)),
                ('width_bobbin', models.CharField(blank=True, max_length=30, null=True)),
                ('width_bobbin_unit', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('develop', models.CharField(blank=True, max_length=30, null=True)),
                ('develop_unit', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('core_dia_bobbin', models.CharField(blank=True, choices=[('3', '3"'), ('6', '6"')], max_length=1, null=True)),
                ('exterior_dia_bobbin', models.CharField(blank=True, max_length=30, null=True)),
                ('exterior_dia_bobbin_unit', models.CharField(blank=True, choices=[('kg', 'kg'), ('mm', 'mm'), ('cm', 'cm'), ('m', 'm')], max_length=3, null=True)),
                ('winding', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8')], max_length=1, null=True)),
                ('winding_description', models.CharField(blank=True, max_length=100, null=True)),
                ('check_ream', models.BooleanField(default=False)),
                ('width_ream', models.CharField(blank=True, max_length=30, null=True)),
                ('lenght_ream', models.CharField(blank=True, max_length=30, null=True)),
                ('weight_ream', models.CharField(blank=True, max_length=30, null=True)),
                ('quantity', models.IntegerField(null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('unit', models.CharField(choices=[('kg', 'kg'), ('m', 'm'), ('m²', 'm²')], max_length=3, null=True)),
                ('tolerance', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('packaging', models.CharField(blank=True, max_length=100, null=True)),
                ('tie_color', models.CharField(blank=True, max_length=100, null=True)),
                ('elaborator', models.CharField(max_length=100, null=True)),
                ('applicant', models.CharField(blank=True, max_length=100, null=True)),
                ('reviewer', models.CharField(blank=True, max_length=100, null=True)),
                ('pre_print', models.BooleanField(default=False)),
                ('colorimetry', models.BooleanField(default=False)),
                ('plan_crx', models.BooleanField(default=False)),
                ('plan_mcl', models.BooleanField(default=False)),
                ('logistics', models.BooleanField(default=False)),
                ('quality', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(blank=True, default=False, null=True)),
                ('deleted_by', models.CharField(blank=True, max_length=30, null=True)),
                ('deleted_time', models.DateTimeField(blank=True, null=True)),
                ('deleted_reason', models.TextField(blank=True, default='', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('client', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='home.client', verbose_name='Clientes')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('printer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.printer')),
            ],
            options={
                'verbose_name': 'historical Solicitud de Prueba',
                'verbose_name_plural': 'historical Solicitudes de Prueba',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTestFileEssay',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('essay', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='home.essay')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('test_file', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.testfile')),
            ],
            options={
                'verbose_name': 'historical Ensayos de Reporte de Control de Calidad',
                'verbose_name_plural': 'historical Ensayos de Reportes de Control de Calidad',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTestFile',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.CharField(choices=[('prt', 'prt'), ('lam', 'lam')], max_length=3, null=True)),
                ('turn', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=3, null=True)),
                ('date', models.DateField(null=True)),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('supervisor', models.CharField(blank=True, max_length=30, null=True)),
                ('boss', models.CharField(blank=True, max_length=30, null=True)),
                ('idat', models.CharField(blank=True, max_length=30, null=True)),
                ('date_created', models.DateTimeField(blank=True, editable=False, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('boot_l', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.laminatorboot')),
                ('boot_p', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.printerboot')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('production_operator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.productionoperator')),
                ('quality_analist', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.qualityanalyst')),
            ],
            options={
                'verbose_name': 'historical Reporte de Control de Calidad',
                'verbose_name_plural': 'historical Reportes de Control de Calidad',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTechnicalSpecs',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('boss', models.CharField(blank=True, max_length=30, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('quality_analist', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.qualityanalyst')),
                ('test_request', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.testrequest')),
            ],
            options={
                'verbose_name': 'historical technical specs',
                'verbose_name_plural': 'historical technical specss',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRewinder',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Máquina Rebobinadora',
                'verbose_name_plural': 'historical Máquinas Rebobinadoras',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalQualityAnalyst',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30, null=True)),
                ('active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Analista ASCA',
                'verbose_name_plural': 'historical Analistas ASCA',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProductionOperator',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=30, null=True)),
                ('active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Operador de producción',
                'verbose_name_plural': 'historical Operadores de producción',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPrinterBoot',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('origin', models.CharField(blank=True, default=None, max_length=15, null=True)),
                ('date_time', models.DateTimeField(null=True)),
                ('turn', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=3, null=True)),
                ('machine_speed', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_crown_treatment', models.BooleanField(default=False)),
                ('crown_treatment_side', models.CharField(blank=True, choices=[('e', 'Externa'), ('i', 'Interna')], max_length=1, null=True)),
                ('surface_tension', models.CharField(blank=True, choices=[('36', '36'), ('38', '38'), ('40', '40'), ('42', '42'), ('44', '44'), ('46', '46')], max_length=2, null=True)),
                ('sta_01', models.CharField(default='-', max_length=20)),
                ('sta_02', models.CharField(default='-', max_length=20)),
                ('sta_03', models.CharField(default='-', max_length=20)),
                ('sta_04', models.CharField(default='-', max_length=20)),
                ('sta_05', models.CharField(default='-', max_length=20)),
                ('sta_06', models.CharField(default='-', max_length=20)),
                ('sta_07', models.CharField(default='-', max_length=20)),
                ('sta_08', models.CharField(default='-', max_length=20)),
                ('sta_09', models.CharField(default='-', max_length=20)),
                ('sta_10', models.CharField(default='-', max_length=20)),
                ('standar', models.CharField(choices=[('Si', 'Si'), ('No', 'No'), ('NA', 'No Aplica')], default='NA', max_length=2)),
                ('art', models.CharField(choices=[('Si', 'Si'), ('No', 'No'), ('NA', 'No Aplica')], default='NA', max_length=2)),
                ('pre_print', models.CharField(choices=[('Si', 'Si'), ('No', 'No'), ('NA', 'No Aplica')], default='NA', max_length=2)),
                ('develop_folder', models.CharField(choices=[('Si', 'Si'), ('No', 'No'), ('NA', 'No Aplica')], default='NA', max_length=2)),
                ('register', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('text', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('dimensions', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('cutting_guide', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('photocell', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('barcode', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente'), ('ad', 'Aceptado con desviación')], max_length=2, null=True)),
                ('develop', models.CharField(blank=True, max_length=30, null=True)),
                ('develop_unit', models.CharField(blank=True, choices=[('mm', 'mm'), ('cm', 'cm'), ('in', 'in')], max_length=3, null=True)),
                ('develop_result', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('cut_width_result', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('design', models.CharField(blank=True, max_length=30, null=True)),
                ('machine_winding', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8')], max_length=1, null=True)),
                ('winding_description', models.CharField(blank=True, max_length=100, null=True)),
                ('r_left', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_right', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_center', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_average', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('color_standar', models.CharField(choices=[('No Aplica', 'No aplica'), ('Claro', 'Claro'), ('Estándar', 'Estándar'), ('Oscuro', 'Oscuro')], max_length=10, null=True)),
                ('anchorage', models.CharField(choices=[('ac', 'Aceptado'), ('de', 'Deficiente')], max_length=2, null=True)),
                ('rub', models.CharField(choices=[('ac', 'Aceptado'), ('de', 'Deficiente')], max_length=2, null=True)),
                ('ther_resistance', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente')], max_length=2, null=True)),
                ('anchorage_resistance', models.CharField(choices=[('na', 'No aplica'), ('ac', 'Aceptado'), ('de', 'Deficiente')], max_length=2, null=True)),
                ('cut_diagram', models.BooleanField(default=False)),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('printer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.printer')),
                ('production_operator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.productionoperator')),
                ('quality_analist', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.qualityanalyst')),
                ('test_request', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.testrequest')),
            ],
            options={
                'verbose_name': 'historical Arranque de impresora Pruebas',
                'verbose_name_plural': 'historical Arranques de impresoras',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPrinter',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Máquina Impresora',
                'verbose_name_plural': 'historical Máquinas Impresoras',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLaminatorBoot',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('origin', models.CharField(blank=True, default=None, max_length=15, null=True)),
                ('date_time', models.DateTimeField(null=True)),
                ('turn', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=3, null=True)),
                ('machine_speed', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_crown_treatment', models.BooleanField(default=False)),
                ('step', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4')], max_length=1, null=True)),
                ('st_1', models.CharField(max_length=25, null=True)),
                ('st_2', models.CharField(max_length=25, null=True)),
                ('st_3', models.CharField(blank=True, max_length=25, null=True)),
                ('st_4', models.CharField(blank=True, max_length=25, null=True)),
                ('batch', models.CharField(blank=True, max_length=20, null=True)),
                ('formula', models.CharField(blank=True, max_length=7, null=True)),
                ('time', models.CharField(blank=True, max_length=100, null=True)),
                ('temp', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('adhesive', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='home.material')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('laminator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.laminator')),
                ('production_operator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.productionoperator')),
                ('quality_analist', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.qualityanalyst')),
                ('test_request', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.testrequest')),
            ],
            options={
                'verbose_name': 'historical Arranque de Laminadora',
                'verbose_name_plural': 'historical Arranques de Laminadora',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLaminator',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Máquina Laminadora',
                'verbose_name_plural': 'historical Máquinas Laminadoras',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLaminationEssay',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('result_t', models.CharField(blank=True, max_length=100, null=True)),
                ('result_a', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_a', models.BooleanField(blank=True, default=False)),
                ('result_b', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_b', models.BooleanField(blank=True, default=False)),
                ('result_c', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_c', models.BooleanField(blank=True, default=False)),
                ('result_p', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('check_p', models.BooleanField(blank=True, default=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('essay', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='home.essay')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('laminator_boot', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.laminatorboot')),
            ],
            options={
                'verbose_name': 'historical Análisis de laminacion',
                'verbose_name_plural': 'historical Análisis de laminacion',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFormat',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=9, null=True, validators=[django.core.validators.MinLengthValidator(9)])),
                ('revission', models.IntegerField(null=True, validators=[django.core.validators.RegexValidator(re.compile('^\\d+(?:,\\d+)*\\Z'), code='invalid', message=None)])),
                ('rev_date', models.DateField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Formato',
                'verbose_name_plural': 'historical Formatos',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCutterBoot',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('date_time', models.DateTimeField(null=True)),
                ('turn', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=3, null=True)),
                ('production_order', models.CharField(blank=True, max_length=7, null=True)),
                ('machine_speed', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('as_treatment', models.BooleanField(default=False)),
                ('r_a', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_b', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_c', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_p', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('w_a', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('w_b', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('w_c', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('w_p', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('apearence', models.CharField(choices=[('AC', 'Aceptado'), ('DE', 'Deficiente'), ('NA', 'No Aplica')], max_length=2, null=True)),
                ('apearence_observation', models.CharField(blank=True, max_length=100, null=True)),
                ('core', models.CharField(blank=True, choices=[('3', '3"'), ('6', '6"')], max_length=2, null=True)),
                ('exterior_dia', models.CharField(max_length=60, null=True)),
                ('print_spec', models.CharField(blank=True, max_length=60, null=True)),
                ('print', models.CharField(blank=True, max_length=60, null=True)),
                ('winding_position', models.CharField(blank=True, max_length=60, null=True)),
                ('dist_boder_material', models.CharField(blank=True, max_length=60, null=True)),
                ('joint_color', models.CharField(blank=True, choices=[('Rojo', 'Rojo'), ('Negro', 'Negro'), ('Marrón', 'Marrón'), ('Transparente', 'Transparente')], max_length=60, null=True)),
                ('joint_color_observation', models.CharField(blank=True, max_length=100, null=True)),
                ('static_spec', models.CharField(blank=True, max_length=60, null=True)),
                ('static', models.CharField(blank=True, max_length=60, null=True)),
                ('packaging_spec', models.CharField(blank=True, max_length=60, null=True)),
                ('packaging', models.CharField(blank=True, max_length=60, null=True)),
                ('pallet_spec', models.CharField(blank=True, max_length=60, null=True)),
                ('pallet', models.CharField(blank=True, max_length=60, null=True)),
                ('n_litters_spec', models.CharField(blank=True, max_length=60, null=True)),
                ('n_litters', models.CharField(blank=True, max_length=60, null=True)),
                ('identification', models.CharField(blank=True, max_length=50, null=True)),
                ('ex_tag', models.BooleanField(default=False)),
                ('in_tag', models.BooleanField(default=False)),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('machine', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.cutter')),
                ('production_operator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.productionoperator')),
                ('quality_analist', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.qualityanalyst')),
                ('rewinder', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.rewinder')),
                ('test_request', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='essays.testrequest')),
            ],
            options={
                'verbose_name': 'historical Arranque de cortadora',
                'verbose_name_plural': 'historical Arranques de cortadoras',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCutter',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=20, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Máquina Cortadora',
                'verbose_name_plural': 'historical Máquinas Cortadoras',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='EntryElement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_test_client', models.BooleanField(default=False)),
                ('test_client', models.CharField(blank=True, max_length=100, null=True)),
                ('date', models.DateField(auto_now_add=True, null=True)),
                ('product', models.CharField(max_length=100, null=True)),
                ('design', models.CharField(blank=True, max_length=100, null=True)),
                ('samples', models.BooleanField(default=False)),
                ('mechanichal_plans', models.BooleanField(default=False)),
                ('technical_specs', models.BooleanField(default=False)),
                ('art', models.BooleanField(default=False)),
                ('product_performance', django_quill.fields.QuillField(blank=True, null=True)),
                ('service_requirements', models.CharField(blank=True, max_length=100, null=True)),
                ('code_page_encodebarcode', models.BooleanField(default=False)),
                ('nutrituonal_table', models.BooleanField(default=False)),
                ('net_content', models.BooleanField(default=False)),
                ('sanitary_reg', models.BooleanField(default=False)),
                ('not_applicable', models.BooleanField(default=False)),
                ('delivery_date', models.BooleanField(default=False)),
                ('quantity', models.BooleanField(default=False)),
                ('technical_assistance', models.BooleanField(default=False)),
                ('post_sale_service', models.BooleanField(default=False)),
                ('other', models.BooleanField(default=False)),
                ('other_description', models.CharField(blank=True, max_length=200, null=True)),
                ('ssmtc', models.BooleanField(default=False)),
                ('ssmtc_description', models.CharField(blank=True, max_length=200, null=True)),
                ('nmp', models.BooleanField(default=False)),
                ('nmp_description', models.CharField(blank=True, max_length=200, null=True)),
                ('norms', models.BooleanField(default=False)),
                ('norms_description', models.CharField(blank=True, max_length=200, null=True)),
                ('tech_inv', models.BooleanField(default=False)),
                ('tech_inv_description', models.CharField(blank=True, max_length=200, null=True)),
                ('hr', models.BooleanField(default=False)),
                ('hr_description', models.CharField(blank=True, max_length=200, null=True)),
                ('similar_products', models.BooleanField(default=False)),
                ('op', models.CharField(blank=True, max_length=9, null=True)),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('ambiental', models.BooleanField(default=False)),
                ('ambiental_description', models.CharField(blank=True, max_length=200, null=True)),
                ('failure', models.BooleanField(default=False)),
                ('failure_description', models.CharField(blank=True, max_length=200, null=True)),
                ('fail_consequence', models.CharField(blank=True, max_length=200, null=True)),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('elaborator', models.CharField(blank=True, max_length=100, null=True)),
                ('reviewer', models.CharField(blank=True, max_length=100, null=True)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='ee_client', to='home.client', verbose_name='Clientes')),
                ('product_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='product_client', to='home.client', verbose_name='Clientes')),
            ],
            options={
                'verbose_name': 'Elementos de entrada para el diseño y desarrollo',
                'verbose_name_plural': 'Elementos de entrada para diseños y desarrollos',
            },
        ),
        migrations.CreateModel(
            name='CutterBoot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(null=True)),
                ('turn', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=3, null=True)),
                ('production_order', models.CharField(blank=True, max_length=7, null=True)),
                ('machine_speed', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('as_treatment', models.BooleanField(default=False)),
                ('r_a', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_b', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_c', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('r_p', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('w_a', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('w_b', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('w_c', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('w_p', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9999.0)])),
                ('apearence', models.CharField(choices=[('AC', 'Aceptado'), ('DE', 'Deficiente'), ('NA', 'No Aplica')], max_length=2, null=True)),
                ('apearence_observation', models.CharField(blank=True, max_length=100, null=True)),
                ('core', models.CharField(blank=True, choices=[('3', '3"'), ('6', '6"')], max_length=2, null=True)),
                ('exterior_dia', models.CharField(max_length=60, null=True)),
                ('print_spec', models.CharField(blank=True, max_length=60, null=True)),
                ('print', models.CharField(blank=True, max_length=60, null=True)),
                ('winding_position', models.CharField(blank=True, max_length=60, null=True)),
                ('dist_boder_material', models.CharField(blank=True, max_length=60, null=True)),
                ('joint_color', models.CharField(blank=True, choices=[('Rojo', 'Rojo'), ('Negro', 'Negro'), ('Marrón', 'Marrón'), ('Transparente', 'Transparente')], max_length=60, null=True)),
                ('joint_color_observation', models.CharField(blank=True, max_length=100, null=True)),
                ('static_spec', models.CharField(blank=True, max_length=60, null=True)),
                ('static', models.CharField(blank=True, max_length=60, null=True)),
                ('packaging_spec', models.CharField(blank=True, max_length=60, null=True)),
                ('packaging', models.CharField(blank=True, max_length=60, null=True)),
                ('pallet_spec', models.CharField(blank=True, max_length=60, null=True)),
                ('pallet', models.CharField(blank=True, max_length=60, null=True)),
                ('n_litters_spec', models.CharField(blank=True, max_length=60, null=True)),
                ('n_litters', models.CharField(blank=True, max_length=60, null=True)),
                ('identification', models.CharField(blank=True, max_length=50, null=True)),
                ('ex_tag', models.BooleanField(default=False)),
                ('in_tag', models.BooleanField(default=False)),
                ('observation', django_quill.fields.QuillField(blank=True, null=True)),
                ('machine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='essays.cutter')),
                ('production_operator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.productionoperator')),
                ('quality_analist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.qualityanalyst')),
                ('rewinder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='essays.rewinder')),
                ('test_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.testrequest')),
            ],
            options={
                'verbose_name': 'Arranque de cortadora',
                'verbose_name_plural': 'Arranques de cortadoras',
            },
        ),
        migrations.AddField(
            model_name='bobbin',
            name='production_operator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.productionoperator'),
        ),
        migrations.AddField(
            model_name='bobbin',
            name='quality_analist',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='essays.qualityanalyst'),
        ),
        migrations.AddField(
            model_name='bobbin',
            name='test_file',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='essays.testfile'),
        ),
    ]
